version: "3"

services:
  remote-container:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: vsc-remote-container
    volumes:
      - .:/home/python/app
      - ~/.aws:/home/python/.aws
    networks:
        - postgres_network
        - postgres_meeting_network
        - microservices
    extra_hosts:
        - "host.docker.internal:172.17.0.1"

  # users:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.users
  #   container_name: meetup-users
  #   ports:
  #     - 4000:4000
  #   volumes:
  #     - ~/.aws:/home/python/.aws

  categories-db:
    image: postgres:14.2-alpine
    container_name: categories-postgres
    restart: always
    tty: true 
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=meetup-categories
    volumes:
      - .docker/cdb:/var/lib/postgresql/data
    networks:
      - postgres_network

  categories:
    depends_on:
      - categories-db
    build:
      context: .
      dockerfile: Dockerfile.categories
    container_name: categories-svc
    ports:
      - 4001:4001
    volumes:
      - ~/.aws:/usr/.aws
    networks:
      - postgres_network
      - microservices
    command: sh -c "dockerize -wait tcp://categories-db:5432 -timeout 30s -wait-retry-interval 3s python3 project/server.py"

  meetings-db:
    image: postgres:14.2-alpine
    container_name: meetings-postgres
    restart: always
    tty: true 
    ports:
      - '5433:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=meetup-meetings
    volumes:
      - .docker/mdb:/var/lib/postgresql/data
    networks:
      - postgres_meeting_network

  meetings:
    depends_on:
      - meetings-db
    build:
      context: .
      dockerfile: Dockerfile.meetings
    container_name: meetings-svc
    ports:
      - 4002:4002
    volumes:
      - ~/.aws:/usr/.aws
    networks:
      - postgres_meeting_network
      - microservices
    command: sh -c "dockerize -wait tcp://meetings-db:5432 -timeout 30s -wait-retry-interval 3s python3 project/server.py"
  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - microservices
    extra_hosts:
      - "host.docker.internal:172.17.0.1"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://host.docker.internal:9094

      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://karapace-registry:8081
    networks:
      - microservices
    extra_hosts:
      - "host.docker.internal:172.17.0.1"

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.0.1
    hostname: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_CONNECT_CLUSTER: http://app-connect:8083
      PORT: 9021
    networks:
      - microservices
    extra_hosts:
      - "host.docker.internal:172.17.0.1"

networks:
  microservices:
    driver: bridge

  postgres_network:
    driver: bridge
  
  postgres_meeting_network:
    driver: bridge
