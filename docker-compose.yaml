version: "3"

services:
  remote-container:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: vsc-remote-container
    volumes:
      - .:/home/python/app
      - ~/.aws:/home/python/.aws
    networks:
        - postgres_network
        - postgres_meeting_network
        - microservices

  # users:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.users
  #   container_name: meetup-users
  #   ports:
  #     - 4000:4000
  #   volumes:
  #     - ~/.aws:/home/python/.aws

  categories-db:
    image: postgres:14.2-alpine
    container_name: categories-postgres
    restart: always
    tty: true 
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=meetup-categories
    volumes:
      - .docker/cdb:/var/lib/postgresql/data
    networks:
      - postgres_network

  categories:
    depends_on:
      - categories-db
    build:
      context: .
      dockerfile: Dockerfile.categories
    container_name: categories-svc
    ports:
      - 4001:4001
    volumes:
      - ~/.aws:/usr/.aws
    networks:
      - postgres_network
      - microservices
    command: sh -c "dockerize -wait tcp://categories-db:5432 -timeout 30s -wait-retry-interval 3s python3 project/server.py"

  meetings-db:
    image: postgres:14.2-alpine
    container_name: meetings-postgres
    restart: always
    tty: true 
    ports:
      - '5433:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=meetup-meetings
    # volumes:
    #   - .docker/mdb:/var/lib/postgresql/data
    networks:
      - postgres_meeting_network

  # meetings:
  #   depends_on:
  #     - meetings-db
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.meetings
  #   container_name: meetings-svc
  #   ports:
  #     - 4002:4002
  #   volumes:
  #     - ~/.aws:/usr/.aws
  #   networks:
  #     - postgres_meeting_network
  #     - microservices
  #   command: sh -c "dockerize -wait tcp://meetings-db:5432 -timeout 30s -wait-retry-interval 3s python3 project/server.py"

networks:
  microservices:
    driver: bridge

  postgres_network:
    driver: bridge
  
  postgres_meeting_network:
    driver: bridge
